{
    "getting-started": {
        "title": "Getting Started",
        "icon": "book",
        "file": "data/static/getting-started.md"
    },
    "commands": {
        "title": "Commands",
        "description": "A list of API functions for commands.",
        "template": "category",
        "icon": "laptop",
        "data": {
            "register": {
                "title": "Register",
                "description": "Registers a new command through Swiftly Commands.",
                "template": "function-syntax",
                "variable": {
                    "lua": "commands:Register"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "commandName": "string",
                    "callback": "fun(playerid:number,args:table,argsCount:number,silent:boolean,prefix:string)"
                },
                "additional": {}
            },
            "unregister": {
                "title": "Unregister",
                "description": "Unregisters a command registered through Swiftly Commands.",
                "template": "function-syntax",
                "variable": {
                    "lua": "commands:Unregister"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "commandName": "string"
                },
                "additional": {}
            },
            "registerrawalias": {
                "title": "RegisterRawAlias",
                "description": "Registers a raw alias (without sw_ in console) for a command registered through Swiftly Commands.",
                "template": "function-syntax",
                "variable": {
                    "lua": "commands:RegisterRawAlias"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "commandName": "string",
                    "alias": "string"
                },
                "additional": {}
            },
            "registeralias": {
                "title": "RegisterAlias",
                "description": "Registers an alias for a command registered through Swiftly Commands.",
                "template": "function-syntax",
                "variable": {
                    "lua": "commands:RegisterAlias"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "commandName": "string",
                    "alias": "string"
                },
                "additional": {}
            },
            "unregisteralias": {
                "title": "UnregisterAlias",
                "description": "Unregisters an alias for a command registered through Swiftly Commands.",
                "template": "function-syntax",
                "variable": {
                    "lua": "commands:UnregisterAlias"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "alias": "string"
                },
                "additional": {}
            },
            "getcommands": {
                "title": "GetCommands",
                "description": "Returns a list of the commands registered by this plugin.",
                "template": "function-syntax",
                "variable": {
                    "lua": "commands:GetCommands"
                },
                "return": {
                    "lua": "table"
                },
                "params": {},
                "additional": {}
            },
            "getallcommands": {
                "title": "GetAllCommands",
                "description": "Returns a list of the commands registered by all the plugins.",
                "template": "function-syntax",
                "variable": {
                    "lua": "commands:GetAllCommands"
                },
                "return": {
                    "lua": "table"
                },
                "params": {},
                "additional": {}
            }
        }
    },
    "configuration": {
        "title": "Configuration",
        "description": "A list of API functions for configuration.",
        "template": "category",
        "icon": "cog",
        "data": {
            "create": {
                "title": "Create",
                "template": "function-syntax",
                "description": "Creates the plugin configuration file.",
                "variable": {
                    "lua": "config:Create"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "config_key": "string",
                    "value": "table"
                },
                "additional": {
                    "lua": "> [!note]\n> The config_key field supports nested configuration. Example: `folder1/folder2/config_key`, resulting in fetching to `folder1.folder2.config_key`.\nThe value needs to be a pair of key-values table in initial state, after it can also include lists and nested tables."
                }
            },
            "reload": {
                "title": "Reload",
                "template": "function-syntax",
                "description": "Reloads the configuration for the specified key.",
                "variable": {
                    "lua": "config:Reload"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "key": "string"
                },
                "additional": {}
            },
            "fetcharraysize": {
                "title": "FetchArraySize",
                "template": "function-syntax",
                "description": "Returns the array size of a config value.",
                "variable": {
                    "lua": "config:FetchArraySize"
                },
                "return": {
                    "lua": "number"
                },
                "params": {
                    "key": "string"
                },
                "additional": {
                    "lua": "> [!note]\n> If the key is invalid or the key is not an array key, it returns 0.\n"
                }
            },
            "fetch": {
                "title": "Fetch",
                "template": "function-syntax",
                "description": "Returns the configuration value for the specified key.",
                "variable": {
                    "lua": "config:Fetch"
                },
                "return": {
                    "lua": "any"
                },
                "params": {
                    "key": "string"
                },
                "additional": {
                    "lua": "> [!note]\n> If the key is invalid or the key is not an array key, it returns nil.\n"
                }
            },
            "exists": {
                "title": "Exists",
                "template": "function-syntax",
                "description": "Returns if the configuration key exists.",
                "variable": {
                    "lua": "config:Exists"
                },
                "return": {
                    "lua": "boolean"
                },
                "params": {
                    "key": "string"
                },
                "additional": {}
            }
        }
    },
    "convars": {
        "title": "Convars",
        "description": "A list of API functions for convars.",
        "template": "category",
        "icon": "puzzle-piece",
        "data": {
            "createfake": {
                "title": "CreateFake",
                "template": "function-syntax",
                "description": "Creates a fake convar.",
                "variable": {
                    "lua": "convar:CreateFake"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "name": "string",
                    "cvartype": "EConVarType",
                    "defaultValue": "any",
                    "protected": "boolean"
                },
                "additional": {
                    "lua": "If the protected is set to true, no data will be sent by the server to the client about this convar."
                }
            },
            "deletefake": {
                "title": "DeleteFake",
                "template": "function-syntax",
                "description": "Deletes a fake convar.",
                "variable": {
                    "lua": "convar:DeleteFake"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "name": "string"
                },
                "additional": {}
            },
            "get": {
                "title": "Get",
                "template": "function-syntax",
                "description": "Returns the convar value.",
                "variable": {
                    "lua": "convar:Get"
                },
                "return": {
                    "lua": "any"
                },
                "params": {
                    "name": "string"
                },
                "additional": {}
            },
            "gettype": {
                "title": "GetType",
                "template": "function-syntax",
                "description": "Returns the convar type.",
                "variable": {
                    "lua": "convar:GetType"
                },
                "return": {
                    "lua": "EConVarType"
                },
                "params": {
                    "name": "string"
                },
                "additional": {}
            },
            "set": {
                "title": "Set",
                "template": "function-syntax",
                "description": "Sets a convar value.",
                "variable": {
                    "lua": "convar:Set"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "name": "string",
                    "value": "string"
                },
                "additional": {}
            },
            "exists": {
                "title": "Exists",
                "template": "function-syntax",
                "description": "Checks if a convar exists.",
                "variable": {
                    "lua": "convar:Exists"
                },
                "return": {
                    "lua": "boolean"
                },
                "params": {
                    "name": "string"
                },
                "additional": {}
            },
            "existsfake": {
                "title": "ExistsFake",
                "template": "function-syntax",
                "description": "Checks if a fake convar exists.",
                "variable": {
                    "lua": "convar:ExistsFake"
                },
                "return": {
                    "lua": "boolean"
                },
                "params": {
                    "name": "string"
                },
                "additional": {}
            },
            "addflags": {
                "title": "AddFlags",
                "template": "function-syntax",
                "description": "Adds the flags to the convar.",
                "variable": {
                    "lua": "convar:AddFlags"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "name": "string",
                    "flags": "number"
                },
                "additional": {}
            },
            "removeflags": {
                "title": "RemoveFlags",
                "template": "function-syntax",
                "description": "Removes the flags from the convar.",
                "variable": {
                    "lua": "convar:RemoveFlags"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "name": "string",
                    "flags": "number"
                },
                "additional": {}
            },
            "getflags": {
                "title": "GetFlags",
                "template": "function-syntax",
                "description": "Returns the convar flags.",
                "variable": {
                    "lua": "convar:GetFlags"
                },
                "return": {
                    "lua": "number"
                },
                "params": {
                    "name": "string"
                },
                "additional": {}
            },
            "hasflags": {
                "title": "HasFlags",
                "template": "function-syntax",
                "description": "Checks if a convar has the flags.",
                "variable": {
                    "lua": "convar:HasFlags"
                },
                "return": {
                    "lua": "boolean"
                },
                "params": {
                    "name": "string",
                    "flags": "number"
                },
                "additional": {}
            }
        }
    },
    "database": {
        "title": "Database",
        "description": "A list of API functions for database.",
        "template": "category",
        "icon": "database",
        "data": {
            "getting-started": {
                "title": "Getting Started",
                "template": "getting-started",
                "description": "To use the Swiftly Database system you need the following code in your plugin.\n\n> [!warning]\n> Don't forget to replace CONNECTION_NAME with your own connection name.\n",
                "content": {
                    "lua": "```lua\nAddEventHandler(\"OnPluginStart\", function(event)\n    db = Database(\"CONNECTION_NAME\")\n    return EventResult.Continue\nend)\n```"
                }
            },
            "querybuilder": {
                "title": "QueryBuilder",
                "description": "This is a class to build an SQL query.",
                "template": "class-syntax",
                "languages": [
                    "lua"
                ],
                "constructor": {
                    "hide": true
                },
                "properties": {},
                "functions": {
                    "Table": {
                        "return": {
                            "lua": "QueryBuilder"
                        },
                        "params": {
                            "table_name": "string"
                        }
                    },
                    "Select": {
                        "return": {
                            "lua": "QueryBuilder"
                        },
                        "params": {
                            "columns": "table"
                        }
                    },
                    "Insert": {
                        "return": {
                            "lua": "QueryBuilder"
                        },
                        "params": {
                            "insert_values": "table"
                        },
                        "additional": {
                            "lua": "`insert_values` is a Key-Value Map (Key: Column, Value: Data)"
                        }
                    },
                    "Update": {
                        "return": {
                            "lua": "QueryBuilder"
                        },
                        "params": {
                            "update_values": "table"
                        },
                        "additional": {
                            "lua": "`update_values` is a Key-Value Map (Key: Column, Value: Data)"
                        }
                    },
                    "Delete": {
                        "return": {
                            "lua": "QueryBuilder"
                        },
                        "params": {}
                    },
                    "Where": {
                        "return": {
                            "lua": "QueryBuilder"
                        },
                        "params": {
                            "column": "string",
                            "operator": "string",
                            "value": "any"
                        }
                    },
                    "OrWhere": {
                        "return": {
                            "lua": "QueryBuilder"
                        },
                        "params": {
                            "column": "string",
                            "operator": "string",
                            "value": "any"
                        }
                    },
                    "Join": {
                        "return": {
                            "lua": "QueryBuilder"
                        },
                        "params": {
                            "table_name": "string",
                            "condition": "string",
                            "join_type": "string"
                        }
                    },
                    "OrderBy": {
                        "return": {
                            "lua": "QueryBuilder"
                        },
                        "params": {
                            "columns": "table"
                        },
                        "additional": {
                            "lua": "`columns` is a Key-Value Map (Key: Column, Value: Direction)"
                        }
                    },
                    "Limit": {
                        "return": {
                            "lua": "QueryBuilder"
                        },
                        "params": {
                            "count": "number"
                        }
                    },
                    "GroupBy": {
                        "return": {
                            "lua": "QueryBuilder"
                        },
                        "params": {
                            "columns": "table"
                        }
                    },
                    "Create": {
                        "return": {
                            "lua": "QueryBuilder"
                        },
                        "params": {
                            "columns": "table"
                        },
                        "additional": {
                            "lua": "`columns` is a Key-Value Map (Key: Column, Value: Column Rules)"
                        }
                    },
                    "Alter": {
                        "return": {
                            "lua": "QueryBuilder"
                        },
                        "params": {
                            "addColumns": "table",
                            "removeColumns": "table",
                            "modifyColumns": "table"
                        },
                        "additional": {
                            "lua": "`addColumns` and `modifyColumns` are a Key-Value Map (Key: Column, Value: Column Rules)\n`removeColumns` is a list of columns to be removed"
                        }
                    },
                    "Drop": {
                        "return": {
                            "lua": "QueryBuilder"
                        },
                        "params": {}
                    },
                    "OnDuplicate": {
                        "return": {
                            "lua": "QueryBuilder"
                        },
                        "params": {
                            "update_value": "table"
                        },
                        "additional": {
                            "lua": "`update_value` is a Key-Value Map (Key: Column, Value: Data)"
                        }
                    },
                    "Having": {
                        "return": {
                            "lua": "QueryBuilder"
                        },
                        "params": {
                            "condition": "string"
                        }
                    },
                    "Distinct": {
                        "return": {
                            "lua": "QueryBuilder"
                        },
                        "params": {}
                    },
                    "Offset": {
                        "return": {
                            "lua": "QueryBuilder"
                        },
                        "params": {
                            "offset": "number"
                        }
                    },
                    "Union": {
                        "return": {
                            "lua": "QueryBuilder"
                        },
                        "params": {
                            "query": "string",
                            "all": "boolean"
                        }
                    },
                    "ToString": {
                        "return": {
                            "lua": "string"
                        },
                        "params": {}
                    },
                    "Execute": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "callback": "fun(err:string,result:table)|nil"
                        }
                    }
                },
                "additional": {}
            },
            "database": {
                "title": "Database",
                "description": "This is the Database class.",
                "template": "class-syntax",
                "languages": [
                    "lua"
                ],
                "constructor": {
                    "connection_name": "string"
                },
                "properties": {},
                "functions": {
                    "IsConnected": {
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {}
                    },
                    "QueryBuilder": {
                        "return": {
                            "lua": "QueryBuilder"
                        },
                        "params": {}
                    },
                    "EscapeString": {
                        "return": {
                            "lua": "string"
                        },
                        "params": {
                            "value": "string"
                        },
                        "additional": {
                            "lua": "> [!note]\n> If the database is not connected it will return the same value."
                        }
                    },
                    "Query": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "query": "string",
                            "callback": "fun(err:string,result:table)|nil"
                        },
                        "additional": {
                            "lua": "> [!note]\n> If the database is not connected it will never execute.\n<br/>\n> [!warning]\n> Works only with SQL databases."
                        }
                    },
                    "QueryParams": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "query": "string",
                            "callback": "fun(err:string,result:table)|nil"
                        },
                        "additional": {
                            "lua": "> [!note]\n> If the database is not connected it will never execute.\n\n### Params\nThe parameters can be used by the following format inside the query string:\n```\n@key\n[key]\n{key}\n```\n\nInside the parameters value it needs to be the following format\n```lua\n{\n    [\"key\"] = value,\n    [\"key2\"] = value,\n    -- ...\n}\n```\n\nThe values can be a string, a number or a boolean. It will automatically convert to string form and perform EscapeString to it so that there would be no chance for SQL Injection.\n\n> [!warning]\n> Works only with SQL databases."
                        }
                    }
                },
                "additional": {}
            }
        }
    },
    "entities": {
        "title": "Entities",
        "description": "A list of API functions for entity management.",
        "template": "category",
        "icon": "user",
        "data": {
            "addhookentityoutput": {
                "title": "AddHookEntityOutput",
                "template": "function-syntax",
                "description": "Adds a hook output for an entity.",
                "variable": {
                    "lua": "AddHookEntityOutput"
                },
                "return": {
                    "lua": "HookHandle"
                },
                "params": {
                    "className": "string",
                    "output": "string"
                },
                "additional": {
                    "lua": "#### Example\nTo hook an entity output, you need to specify the classname and the output you want, add an [AddPreHookListener](https://beta.swiftlycs2.net/plugin-docs/scripting/hooks/addprehooklistener) or an [AddPostHookListener](https://beta.swiftlycs2.net/plugin-docs/scripting/hooks/addposthooklistener) using the following event callback\n```lua\nlocal hookoutput = AddHookEntityOutput(\"weapon_knife\", \"*\")\n--- @param event Event\n--- @param iooutput CEntityIOOutput\n--- @param event_output string\n--- @param activator CEntityInstance\n--- @param caller CEntityInstance\n--- @param delay number\n--- @return number|nil EventResult\nAddPreHookListener(hookoutput, function(event, iooutput, event_output, activator, caller, delay)\n    -- In this example we're listening to all the outputs of weapon_knife.\n    return EventResult.Continue\nend)\n```"
                }
            },
            "findentitiesbyclassname": {
                "title": "FindEntitiesByClassname",
                "template": "function-syntax",
                "description": "Returns all the `CEntityInstance` for all the entities available with the specified classname.",
                "variable": {
                    "lua": "FindEntitiesByClassname"
                },
                "return": {
                    "lua": "table"
                },
                "params": {
                    "className": "string"
                },
                "additional": {}
            },
            "createentitybyname": {
                "title": "CreateEntityByName",
                "template": "function-syntax",
                "description": "Creates an entity by the provided class name.",
                "variable": {
                    "lua": "CreateEntityByName"
                },
                "return": {
                    "lua": "CEntityInstance"
                },
                "params": {
                    "className": "string"
                },
                "additional": {
                    "lua": "To see a complete list of class names and the specific entity class, see the following link: [https://cs2.poggu.me/dumped-data/entity-list](https://cs2.poggu.me/dumped-data/entity-list).\n\nThis list is provided by Poggu on it's own website for Counter Strike 2."
                }
            },
            "centitykeyvalues": {
                "title": "CEntityKeyValues",
                "description": "",
                "template": "class-syntax",
                "languages": [
                    "lua"
                ],
                "constructor": {},
                "properties": {},
                "functions": {
                    "GetBool": {
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "GetInt": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "GetUint": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "GetInt64": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "GetUint64": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "GetFloat": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "GetDouble": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "GetString": {
                        "return": {
                            "lua": "string"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "GetPtr": {
                        "return": {
                            "lua": "string"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "GetStringToken": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "GetColor": {
                        "return": {
                            "lua": "Color"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "GetVector": {
                        "return": {
                            "lua": "Vector"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "GetVector2D": {
                        "return": {
                            "lua": "Vector2D"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "GetVector4D": {
                        "return": {
                            "lua": "Vector4D"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "GetQAngle": {
                        "return": {
                            "lua": "QAngle"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "SetBool": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "value": "boolean"
                        }
                    },
                    "SetInt": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "value": "number"
                        }
                    },
                    "SetUint": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "value": "number"
                        }
                    },
                    "SetInt64": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "value": "number"
                        }
                    },
                    "SetUint64": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "value": "number"
                        }
                    },
                    "SetFloat": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "value": "number"
                        }
                    },
                    "SetDouble": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "value": "number"
                        }
                    },
                    "SetString": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "value": "string"
                        }
                    },
                    "SetPtr": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "value": "string"
                        }
                    },
                    "SetStringToken": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "value": "number"
                        }
                    },
                    "SetColor": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "value": "Color"
                        }
                    },
                    "SetVector": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "value": "Vector"
                        }
                    },
                    "SetVector2D": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "value": "Vector2D"
                        }
                    },
                    "SetVector4D": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "value": "Vector4D"
                        }
                    },
                    "SetQAngle": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "value": "QAngle"
                        }
                    }
                },
                "additional": {}
            }
        }
    },
    "events": {
        "title": "Events",
        "description": "A list of events provided by Swiftly API.",
        "template": "category",
        "icon": "code",
        "data": {
            "event": {
                "title": "Event",
                "description": "This is the Event class.\nGenerates an event object to trigger a game event from Counter Strike: 2.\nThe event names are being listed inside [Game Events](https://swiftlycs2.net/docs/scripting/events/gameevents/).",
                "template": "class-syntax",
                "languages": [
                    "lua"
                ],
                "constructor": {
                    "event_name": "string"
                },
                "properties": {},
                "functions": {
                    "GetInvokingPlugin": {
                        "return": {
                            "lua": "string"
                        },
                        "params": {}
                    },
                    "IsGameEvent": {
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {}
                    },
                    "IsHook": {
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {}
                    },
                    "SetBool": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "value": "boolean"
                        }
                    },
                    "SetInt": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "value": "number"
                        }
                    },
                    "SetUint64": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "value": "number"
                        }
                    },
                    "SetFloat": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "value": "number"
                        }
                    },
                    "SetString": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "value": "string"
                        }
                    },
                    "GetBool": {
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "GetInt": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "GetUint64": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "GetFloat": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "GetString": {
                        "return": {
                            "lua": "string"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "GetReturn": {
                        "return": {
                            "lua": "any"
                        },
                        "params": {}
                    },
                    "SetReturn": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "value": "any"
                        }
                    },
                    "FireEvent": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "dontBroadcast": "boolean"
                        }
                    },
                    "FireEventToClient": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "playerid": "number"
                        }
                    },
                    "SetHookBoolean": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "index": "number",
                            "value": "boolean"
                        }
                    },
                    "SetHookInt": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "index": "number",
                            "value": "number"
                        }
                    },
                    "SetHookUInt": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "index": "number",
                            "value": "number"
                        }
                    },
                    "SetHookUInt64": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "index": "number",
                            "value": "number"
                        }
                    },
                    "SetHookInt64": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "index": "number",
                            "value": "number"
                        }
                    },
                    "SetHookFloat": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "index": "number",
                            "value": "number"
                        }
                    },
                    "SetHookDouble": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "index": "number",
                            "value": "number"
                        }
                    },
                    "SetHookString": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "index": "number",
                            "value": "string"
                        }
                    },
                    "SetHookPointer": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "index": "number",
                            "value": "Memory"
                        }
                    },
                    "GetHookBoolean": {
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {
                            "index": "number"
                        }
                    },
                    "GetHookInt": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "index": "number"
                        }
                    },
                    "GetHookUInt": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "index": "number"
                        }
                    },
                    "GetHookInt64": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "index": "number"
                        }
                    },
                    "GetHookUInt64": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "index": "number"
                        }
                    },
                    "GetHookFloat": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "index": "number"
                        }
                    },
                    "GetHookDouble": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "index": "number"
                        }
                    },
                    "GetHookString": {
                        "return": {
                            "lua": "string"
                        },
                        "params": {
                            "index": "number"
                        }
                    },
                    "GetHookPointer": {
                        "return": {
                            "lua": "Memory"
                        },
                        "params": {
                            "index": "number"
                        }
                    },
                    "GetHookReturn": {
                        "return": {
                            "lua": "any"
                        },
                        "params": {}
                    },
                    "SetHookReturn": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "value": "any"
                        }
                    }
                },
                "additional": {}
            },
            "core": {
                "title": "Core Events",
                "description": "A list of the game events implemented by Swiftly Core.",
                "template": "category",
                "icon": "laptop-code",
                "data": {
                    "onpluginstart": {
                        "title": "OnPluginStart",
                        "template": "core-event-syntax",
                        "description": "This game event is triggered when the plugin starts.",
                        "return": {
                            "lua": "void"
                        },
                        "params": {},
                        "additional": {}
                    },
                    "onpluginstop": {
                        "title": "OnPluginStop",
                        "template": "core-event-syntax",
                        "description": "This game event is triggered when the plugin stops.",
                        "return": {
                            "lua": "void"
                        },
                        "params": {},
                        "additional": {}
                    },
                    "onallpluginsloaded": {
                        "title": "OnAllPluginsLoaded",
                        "template": "core-event-syntax",
                        "description": "This game event is triggered when all the plugins are loaded.",
                        "return": {
                            "lua": "void"
                        },
                        "params": {},
                        "additional": {}
                    },
                    "onmapload": {
                        "title": "OnMapLoad",
                        "template": "core-event-syntax",
                        "description": "This game event is triggered when a map loads.",
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "map": "string"
                        },
                        "additional": {}
                    },
                    "onmapunload": {
                        "title": "OnMapUnload",
                        "template": "core-event-syntax",
                        "description": "This game event is triggered when a map unloads.",
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "map": "string"
                        },
                        "additional": {}
                    },
                    "ongametick": {
                        "title": "OnGameTick",
                        "template": "core-event-syntax",
                        "description": "This game event is called at every server tick.",
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "simulating": "boolean",
                            "bFirstTick": "boolean",
                            "bLastTick": "boolean"
                        },
                        "additional": {}
                    },
                    "onclientdisconnect": {
                        "title": "OnClientDisconnect",
                        "template": "core-event-syntax",
                        "description": "This game event is triggered when a client disconnects.",
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "playerid": "number"
                        },
                        "additional": {}
                    },
                    "onterminateround": {
                        "title": "OnTerminateRound",
                        "template": "core-event-syntax",
                        "description": "This game event is triggered when CGameRules->TerminateRound is being called.",
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {
                            "delay": "number",
                            "reason": "number"
                        },
                        "additional": {}
                    },
                    "onentityacceptinput": {
                        "title": "OnEntityAcceptInput",
                        "template": "core-event-syntax",
                        "description": "This game event is triggered when an entity receives an input.",
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {
                            "entity": "CEntityInstance",
                            "inputname": "string",
                            "activator": "CEntityInstance",
                            "caller": "CEntityInstance",
                            "value": "string",
                            "outputID": "number"
                        },
                        "additional": {}
                    },
                    "onplayerchecktransmit": {
                        "title": "OnPlayerCheckTransmit",
                        "template": "core-event-syntax",
                        "description": "This game event is triggered when a player checks for transmitting entities.",
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "playerid": "number",
                            "transmitinfo": "CCheckTransmitInfo"
                        },
                        "additional": {}
                    },
                    "onclientconnect": {
                        "title": "OnClientConnect",
                        "template": "core-event-syntax",
                        "description": "This game event is triggered when a client connects.",
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {
                            "playerid": "number"
                        },
                        "additional": {}
                    },
                    "onentityspawned": {
                        "title": "OnEntitySpawned",
                        "template": "core-event-syntax",
                        "description": "This game event is triggered when an entity is spawned on the server.",
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "entityptr": "string"
                        },
                        "additional": {}
                    },
                    "onentitycreated": {
                        "title": "OnEntityCreated",
                        "template": "core-event-syntax",
                        "description": "This game event is triggered when an entity is created on the server.",
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "entityptr": "string"
                        },
                        "additional": {}
                    },
                    "onentitydeleted": {
                        "title": "OnEntityDeleted",
                        "template": "core-event-syntax",
                        "description": "This game event is triggered when an entity is deleted from the server.",
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "entityptr": "string"
                        },
                        "additional": {}
                    },
                    "onclientkeystatechange": {
                        "title": "OnClientKeyStateChange",
                        "template": "core-event-syntax",
                        "description": "This game event is triggered when a key state changes for a client.",
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "playerid": "number",
                            "key": "string",
                            "pressed": "boolean"
                        },
                        "additional": {}
                    },
                    "onclientconvarquery": {
                        "title": "OnClientConvarQuery",
                        "template": "core-event-syntax",
                        "description": "This game event is triggered when a player's convar is being queried.",
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "playerid": "number",
                            "convar_name": "string",
                            "convar_value": "string"
                        },
                        "additional": {}
                    },
                    "onclientcommand": {
                        "title": "OnClientCommand",
                        "template": "core-event-syntax",
                        "description": "This game event is triggered when a client sends a command.",
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {
                            "playerid": "number",
                            "command": "string"
                        },
                        "additional": {}
                    },
                    "onclientchat": {
                        "title": "OnClientChat",
                        "template": "core-event-syntax",
                        "description": "This game event is triggered when a player sends a text message.",
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {
                            "playerid": "number",
                            "text": "string",
                            "teamonly": "boolean"
                        },
                        "additional": {}
                    },
                    "onplayerdamage": {
                        "title": "OnPlayerDamage",
                        "template": "core-event-syntax",
                        "description": "This game event is triggered when a player receives damage.",
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {
                            "playerid": "number",
                            "attackerid": "number",
                            "damageinfo": "CTakeDamageInfo",
                            "inflictor": "CBaseEntity",
                            "ability": "CBaseEntity"
                        },
                        "additional": {}
                    },
                    "onplayerpostthink": {
                        "title": "OnPlayerPostThink",
                        "template": "core-event-syntax",
                        "description": "This game event is triggered when the hook CCSPlayerPawnBase_PostThink is being called.",
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "playerid": "number"
                        },
                        "additional": {
                            "lua": "#### How can I stop the execution?\nSimply return `EventResult.Stop` and it will be blocked."
                        }
                    },
                    "onusermessagesend": {
                        "title": "OnUserMessageSend",
                        "template": "core-event-syntax",
                        "description": "This game event is triggered when a user message is being sent to a player.",
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "usermessage_uuid": "string",
                            "isreliable": "boolean"
                        },
                        "additional": {
                            "lua": "> [!note]\n> The methods to get the clients are preset in [UserMessage](https://beta.swiftlycs2.net/plugin-docs/scripting/usermessages/usermessage) class: AddClient, RemoveClient, ClearClients, AddClients and GetClients.\n\n#### How can I stop the execution of a User Message?\nSimply return `EventResult.Stop` and it will be blocked.\n\n#### How can I get the UserMessage?\nTo get the user message object, you need to use [GetUserMessage](https://beta.swiftlycs2.net/plugin-docs/scripting/utils/misc/getusermessage) along with the `usermessage_uuid` parameter."
                        }
                    }
                }
            },
            "function": {
                "title": "Functions",
                "description": "A list of API functions for event listening.",
                "template": "category",
                "icon": "cog",
                "data": {
                    "addeventhandler": {
                        "title": "AddEventHandler",
                        "template": "function-syntax",
                        "description": "Adds a new event handler for the specified event.",
                        "variable": {
                            "lua": "AddEventHandler"
                        },
                        "return": {
                            "lua": "EventHandler"
                        },
                        "params": {
                            "eventName": "string",
                            "callback": "fun(event:Event,...):number EventResult"
                        },
                        "additional": {}
                    },
                    "removeeventhandler": {
                        "title": "RemoveEventHandler",
                        "template": "function-syntax",
                        "description": "Removes the specified event handler.",
                        "variable": {
                            "lua": "RemoveEventHandler"
                        },
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "eventHandler": "EventHandler"
                        },
                        "additional": {}
                    },
                    "triggerevent": {
                        "title": "TriggerEvent",
                        "template": "function-syntax",
                        "description": "Triggers an event and returns the event result and the event data.",
                        "variable": {
                            "lua": "TriggerEvent"
                        },
                        "return": {
                            "lua": "EventResult, Event"
                        },
                        "params": {
                            "eventName": "string",
                            "...": "any"
                        },
                        "additional": {}
                    }
                }
            }
        }
    },
    "exports": {
        "title": "Exports",
        "description": "A list of API functions for exports.",
        "template": "category",
        "icon": "file-export",
        "data": {
            "call": {
                "title": "Call Export",
                "template": "function-syntax",
                "description": "Calls the specified export.",
                "variable": {
                    "lua": "exports[\"PLUGIN_NAME\"]:EXPORT_NAME"
                },
                "return": {
                    "lua": "any"
                },
                "params": {
                    "...": "any"
                },
                "additional": {
                    "lua": "> [!warning]\n> Replace `PLUGIN_NAME` with the plugin name for the specific export.\n> Replace `EXPORT_NAME` with the export name."
                }
            },
            "register": {
                "title": "Register Export",
                "template": "function-syntax",
                "description": "Registers an export for this plugin.",
                "variable": {
                    "lua": "export"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "exportName": "string",
                    "callback": "fun(...)"
                },
                "additional": {}
            }
        }
    },
    "files": {
        "title": "Files",
        "description": "A list of API functions for files.",
        "template": "category",
        "icon": "file",
        "data": {
            "append": {
                "title": "Append",
                "template": "function-syntax",
                "description": "Appends the content to a file",
                "variable": {
                    "lua": "files:Append"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "path": "string",
                    "content": "string",
                    "hasdate": "boolean"
                },
                "additional": {
                    "lua": "> [!note]\n> The root of the Files API is located in `game/csgo`.\n"
                }
            },
            "createdirectory": {
                "title": "CreateDirectory",
                "template": "function-syntax",
                "description": "Creates a directory",
                "variable": {
                    "lua": "files:CreateDirectory"
                },
                "return": {
                    "lua": "boolean"
                },
                "params": {
                    "path": "string"
                },
                "additional": {
                    "lua": "> [!note]\n> The root of the Files API is located in `game/csgo`.\n"
                }
            },
            "delete": {
                "title": "Delete",
                "template": "function-syntax",
                "description": "Deletes a file",
                "variable": {
                    "lua": "files:Delete"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "path": "string"
                },
                "additional": {
                    "lua": "> [!note]\n> The root of the Files API is located in `game/csgo`.\n"
                }
            },
            "existspath": {
                "title": "ExistsPath",
                "template": "function-syntax",
                "description": "Returns if the path exists or not",
                "variable": {
                    "lua": "files:ExistsPath"
                },
                "return": {
                    "lua": "boolean"
                },
                "params": {
                    "path": "string"
                },
                "additional": {
                    "lua": "> [!note]\n> The root of the Files API is located in `game/csgo`.\n"
                }
            },
            "fetchdirectories": {
                "title": "FetchDirectories",
                "template": "function-syntax",
                "description": "Returns a list of all the directories in a directory.",
                "variable": {
                    "lua": "files:FetchDirectories"
                },
                "return": {
                    "lua": "table"
                },
                "params": {
                    "path": "string"
                },
                "additional": {
                    "lua": "> [!note]\n> The root of the Files API is located in `game/csgo`.\n"
                }
            },
            "fetchfilenames": {
                "title": "FetchFileNames",
                "template": "function-syntax",
                "description": "Returns a list of all the file names in a directory.",
                "variable": {
                    "lua": "files:FetchFileNames"
                },
                "return": {
                    "lua": "table"
                },
                "params": {
                    "path": "string"
                },
                "additional": {
                    "lua": "> [!note]\n> The root of the Files API is located in `game/csgo`.\n"
                }
            },
            "getbase": {
                "title": "GetBase",
                "template": "function-syntax",
                "description": "Returns the base path of a file",
                "variable": {
                    "lua": "files:GetBase"
                },
                "return": {
                    "lua": "string"
                },
                "params": {
                    "path": "string"
                },
                "additional": {
                    "lua": "> [!note]\n> The root of the Files API is located in `game/csgo`.\n"
                }
            },
            "isdirectory": {
                "title": "IsDirectory",
                "template": "function-syntax",
                "description": "Returns if the path is a directory or not",
                "variable": {
                    "lua": "files:IsDirectory"
                },
                "return": {
                    "lua": "boolean"
                },
                "params": {
                    "path": "string"
                },
                "additional": {
                    "lua": "> [!note]\n> The root of the Files API is located in `game/csgo`.\n"
                }
            },
            "read": {
                "title": "Read",
                "template": "function-syntax",
                "description": "Reads the content of a file",
                "variable": {
                    "lua": "files:Read"
                },
                "return": {
                    "lua": "string"
                },
                "params": {
                    "path": "string"
                },
                "additional": {
                    "lua": "> [!note]\n> The root of the Files API is located in `game/csgo`.\n"
                }
            },
            "write": {
                "title": "Write",
                "template": "function-syntax",
                "description": "Writes the content to a file",
                "variable": {
                    "lua": "files:Write"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "path": "string",
                    "content": "string",
                    "hasdate": "boolean"
                },
                "additional": {
                    "lua": "> [!note]\n> The root of the Files API is located in `game/csgo`.\n"
                }
            },
            "compress": {
                "title": "Compress",
                "template": "function-syntax",
                "description": "Compresses a file.",
                "variable": {
                    "lua": "files:Compress"
                },
                "return": {
                    "lua": "boolean"
                },
                "params": {
                    "path": "string",
                    "output": "string"
                },
                "additional": {
                    "lua": "> [!note]\n> The root of the Files API is located in `game/csgo`.\n"
                }
            },
            "decompress": {
                "title": "Decompress",
                "template": "function-syntax",
                "description": "Decompresses a file.",
                "variable": {
                    "lua": "files:Decompress"
                },
                "return": {
                    "lua": "boolean"
                },
                "params": {
                    "path": "string",
                    "output": "string"
                },
                "additional": {
                    "lua": "> [!note]\n> The root of the Files API is located in `game/csgo`.\n"
                }
            }
        }
    },
    "generic": {
        "title": "Generic",
        "description": "A list of API functions for base scripting.",
        "template": "category",
        "icon": "circle-info",
        "data": {
            "print": {
                "title": "Print",
                "description": "Prints values provided in the function.",
                "template": "function-syntax",
                "variable": {
                    "lua": "print"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "...": "any"
                },
                "additional": {
                    "lua": "\n\n## Colors\nBelow there are listed all the supported colors by Swiftly:\n```\n{DEFAULT}\n{WHITE}\n{DARKRED}\n{LIGHTPURPLE}\n{GREEN}\n{OLIVE}\n{LIME}\n{RED}\n{LIGHTYELLOW}\n{YELLOW}\n{BLUEGREY}\n{LIGHTBLUE}\n{BLUE}\n{DARKBLUE}\n{PURPLE}\n{MAGENTA}\n{LIGHTRED}\n{GOLD}\n{ORANGE}\n```"
                }
            },
            "getcurrentpluginname": {
                "title": "GetCurrentPluginName",
                "description": "Returns the current plugin name.",
                "template": "function-syntax",
                "variable": {
                    "lua": "GetCurrentPluginName"
                },
                "return": {
                    "lua": "string"
                },
                "params": {},
                "additional": {}
            },
            "getpluginpath": {
                "title": "GetPluginPath",
                "description": "Returns the path of a plugin.",
                "template": "function-syntax",
                "variable": {
                    "lua": "GetPluginPath"
                },
                "return": {
                    "lua": "string"
                },
                "params": {
                    "plugin_name": "string"
                },
                "additional": {}
            },
            "getpluginstate": {
                "title": "GetPluginState",
                "description": "Returns the state of a plugin.",
                "template": "function-syntax",
                "variable": {
                    "lua": "GetPluginState"
                },
                "return": {
                    "lua": "PluginState_t"
                },
                "params": {
                    "plugin_name": "string"
                },
                "additional": {}
            },
            "createtexttable": {
                "title": "CreateTextTable",
                "description": "Returns a string table generated from provided arguments.",
                "template": "function-syntax",
                "variable": {
                    "lua": "CreateTextTable"
                },
                "return": {
                    "lua": "string"
                },
                "params": {
                    "data": "table"
                },
                "additional": {}
            }
        }
    },
    "hooks": {
        "title": "Hooks",
        "description": "A list of API functions for function hooks.",
        "template": "category",
        "icon": "anchor",
        "data": {
            "addhook": {
                "title": "AddHook",
                "template": "function-syntax",
                "description": "Creates a function hook.",
                "variable": {
                    "lua": "AddHook"
                },
                "return": {
                    "lua": "HookHandle"
                },
                "params": {
                    "memory": "Memory",
                    "args_list": "string",
                    "return_type": "string"
                },
                "additional": {
                    "lua": "Below will be listed a table for all the data types for args list and return type:\n\n|         Data Types        | Value |\n|:-------------------------:|:-----:|\n|         `Pointer`         |  `p`  |\n|          `Float`          |  `f`  |\n|         `Boolean`         |  `b`  |\n|          `Double`         |  `d`  |\n|         `Integer`         |  `i`  |\n|     `Unsigned Integer`    |  `u`  |\n|       `string`       |  `s`  |\n|      `64-bit Integer`     |  `I`  |\n| `64-bit Unsigned Integer` |  `U`  |\n|           `Void`          |  `v`  |"
                }
            },
            "addprehooklistener": {
                "title": "AddPreHookListener",
                "template": "function-syntax",
                "description": "Adds a new hook listener before the hook is executed.",
                "variable": {
                    "lua": "AddPreHookListener"
                },
                "return": {
                    "lua": "EventHandler"
                },
                "params": {
                    "hookHandle": "HookHandle",
                    "callback": "fun(event:Event):number EventResult"
                },
                "additional": {}
            },
            "addposthooklistener": {
                "title": "AddPostHookListener",
                "template": "function-syntax",
                "description": "Adds a new hook listener after the hook is executed.",
                "variable": {
                    "lua": "AddPostHookListener"
                },
                "return": {
                    "lua": "EventHandler"
                },
                "params": {
                    "hookHandle": "HookHandle",
                    "callback": "fun(event:Event):number EventResult"
                },
                "additional": {}
            },
            "removehooklistener": {
                "title": "RemoveHookListener",
                "template": "function-syntax",
                "description": "Removes the specified hook listener.",
                "variable": {
                    "lua": "RemoveHookListener"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "eventHandler": "EventHandler"
                },
                "additional": {}
            },
            "callhook": {
                "title": "CallHook",
                "template": "function-syntax",
                "description": "Calls a specific hook.",
                "variable": {
                    "lua": "CallHook"
                },
                "return": {
                    "lua": "any"
                },
                "params": {
                    "hookHandle": "HookHandle",
                    "...": "any"
                },
                "additional": {}
            }
        }
    },
    "http": {
        "title": "HTTP",
        "description": "A list of API functions for HTTP.",
        "template": "category",
        "icon": "computer",
        "data": {
            "performhttprequest": {
                "title": "PerformHTTPRequest",
                "template": "function-syntax",
                "description": "Performs a HTTP request.",
                "variable": {
                    "lua": "PerformHTTPRequest"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "url": "string",
                    "callback": "cb(status:number,body:string,headers:table,err:string)",
                    "method": "string",
                    "data": "string",
                    "headers": "table",
                    "files": "table"
                },
                "additional": {}
            },
            "listen": {
                "title": "HTTP Server",
                "template": "function-syntax",
                "description": "Creates a HTTP Server.",
                "variable": {
                    "lua": "http:Listen"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "ip_addr": "string",
                    "port": "number",
                    "callback": "fun(req:HTTPRequest,res:HTTPResponse)"
                },
                "additional": {}
            },
            "request": {
                "title": "HTTPRequest",
                "description": "A HTTP Request is an object which stores informations about the request made by the client.",
                "template": "class-syntax",
                "languages": [
                    "lua"
                ],
                "constructor": {
                    "hide": true
                },
                "properties": {
                    "path": {
                        "type": "string",
                        "writable": false
                    },
                    "method": {
                        "type": "string",
                        "writable": false
                    },
                    "body": {
                        "type": "string",
                        "writable": false
                    },
                    "files": {
                        "type": "table",
                        "writable": false
                    },
                    "headers": {
                        "type": "table",
                        "writable": false
                    },
                    "params": {
                        "type": "table",
                        "writable": false
                    }
                },
                "functions": {},
                "additional": {}
            },
            "response": {
                "title": "HTTPResponse",
                "description": "A HTTP Response is an object which stores informations about what the server should return to the client request.",
                "template": "class-syntax",
                "languages": [
                    "lua"
                ],
                "constructor": {
                    "hide": true
                },
                "properties": {},
                "functions": {
                    "WriteBody": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "content": "string"
                        }
                    },
                    "GetHeaders": {
                        "return": {
                            "lua": "table"
                        },
                        "params": {}
                    },
                    "GetHeader": {
                        "return": {
                            "lua": "string"
                        },
                        "params": {
                            "key": "string"
                        }
                    },
                    "SetHeader": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "key": "string",
                            "params": "string"
                        }
                    },
                    "Send": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "response_code": "number"
                        }
                    },
                    "IsCompleted": {
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {}
                    }
                },
                "additional": {}
            }
        }
    },
    "ip": {
        "title": "IP",
        "description": "A list of API functions for IP informations.",
        "template": "category",
        "icon": "magnifying-glass",
        "data": {
            "getisocode": {
                "title": "GetIsoCode",
                "template": "function-syntax",
                "description": "Returns the ISO code for the country from which this ip originates.",
                "variable": {
                    "lua": "ip:GetIsoCode"
                },
                "return": {
                    "lua": "string"
                },
                "params": {
                    "ip": "string"
                },
                "additional": {}
            },
            "getcontinent": {
                "title": "GetContinent",
                "template": "function-syntax",
                "description": "Returns the continent from which this ip originates.",
                "variable": {
                    "lua": "ip:GetContinent"
                },
                "return": {
                    "lua": "string"
                },
                "params": {
                    "ip": "string"
                },
                "additional": {}
            },
            "getcountry": {
                "title": "GetCountry",
                "template": "function-syntax",
                "description": "Returns the country from which this ip originates.",
                "variable": {
                    "lua": "ip:GetCountry"
                },
                "return": {
                    "lua": "string"
                },
                "params": {
                    "ip": "string"
                },
                "additional": {}
            },
            "getregion": {
                "title": "GetRegion",
                "template": "function-syntax",
                "description": "Returns the region from which this ip originates.",
                "variable": {
                    "lua": "ip:GetRegion"
                },
                "return": {
                    "lua": "string"
                },
                "params": {
                    "ip": "string"
                },
                "additional": {}
            },
            "getcity": {
                "title": "GetCity",
                "template": "function-syntax",
                "description": "Returns the city from which this ip originates.",
                "variable": {
                    "lua": "ip:GetCity"
                },
                "return": {
                    "lua": "string"
                },
                "params": {
                    "ip": "string"
                },
                "additional": {}
            },
            "gettimezone": {
                "title": "GetTimezone",
                "template": "function-syntax",
                "description": "Returns the timezone of the country from which this ip originates.",
                "variable": {
                    "lua": "ip:GetTimezone"
                },
                "return": {
                    "lua": "string"
                },
                "params": {
                    "ip": "string"
                },
                "additional": {}
            },
            "getlatitude": {
                "title": "GetLatitude",
                "template": "function-syntax",
                "description": "Returns the latitude from which this ip originates.",
                "variable": {
                    "lua": "ip:GetLatitude"
                },
                "return": {
                    "lua": "number"
                },
                "params": {
                    "ip": "string"
                },
                "additional": {}
            },
            "getlongitude": {
                "title": "GetLongitude",
                "template": "function-syntax",
                "description": "Returns the longitude from which this ip originates.",
                "variable": {
                    "lua": "ip:GetLongitude"
                },
                "return": {
                    "lua": "number"
                },
                "params": {
                    "ip": "string"
                },
                "additional": {}
            },
            "getasn": {
                "title": "GetASN",
                "template": "function-syntax",
                "description": "Returns the Autonomous System Number (ASN) from which this ip originates.",
                "variable": {
                    "lua": "ip:GetASN"
                },
                "return": {
                    "lua": "string"
                },
                "params": {
                    "ip": "string"
                },
                "additional": {}
            }
        }
    },
    "logs": {
        "title": "Logs",
        "description": "A list of API functions for logging.",
        "template": "category",
        "icon": "list",
        "data": {
            "write": {
                "title": "Write",
                "template": "function-syntax",
                "description": "Writes a specific text in the plugin's log file.",
                "variable": {
                    "lua": "logger:Write"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "log_type": "LogType_t",
                    "text": "string"
                },
                "additional": {}
            }
        }
    },
    "memory": {
        "title": "Memory",
        "description": "A list of API functions for memory manipulation.",
        "template": "category",
        "icon": "memory",
        "data": {
            "accessindex": {
                "title": "AccessIndex",
                "template": "function-syntax",
                "description": "Accesses the specified index.",
                "variable": {
                    "lua": "memory:AccessIndex"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "index": "number"
                },
                "additional": {}
            },
            "accessedvtable": {
                "title": "AccessedVTable",
                "template": "function-syntax",
                "description": "Returns if the memory is in the VTable.",
                "variable": {
                    "lua": "memory:AccessedVTable"
                },
                "return": {
                    "lua": "boolean"
                },
                "params": {},
                "additional": {}
            },
            "accessvtable": {
                "title": "AccessVTable",
                "template": "function-syntax",
                "description": "Accesses the VTable at the specified offset.",
                "variable": {
                    "lua": "memory:AccessVTable"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "offset": "number"
                },
                "additional": {}
            },
            "accessvtablefromoffset": {
                "title": "AccessVTableFromOffset",
                "template": "function-syntax",
                "description": "Accesses the VTable at the specified offset from `offsets.json`.",
                "variable": {
                    "lua": "memory:AccessVTableFromOffset"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "offsetName": "string"
                },
                "additional": {}
            },
            "setbool": {
                "title": "SetBool",
                "template": "function-syntax",
                "description": "Set the boolean value to the memory address.",
                "variable": {
                    "lua": "memory:SetBool"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "value": "boolean"
                },
                "additional": {}
            },
            "getbool": {
                "title": "GetBool",
                "template": "function-syntax",
                "description": "Returns the boolean value at the memory address.",
                "variable": {
                    "lua": "memory:SetBool"
                },
                "return": {
                    "lua": "boolean"
                },
                "params": {},
                "additional": {}
            },
            "setint": {
                "title": "SetInt",
                "template": "function-syntax",
                "description": "Set the number value to the memory address.",
                "variable": {
                    "lua": "memory:SetInt"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "value": "number"
                },
                "additional": {}
            },
            "getint": {
                "title": "GetInt",
                "template": "function-syntax",
                "description": "Returns the number value at the memory address.",
                "variable": {
                    "lua": "memory:GetInt"
                },
                "return": {
                    "lua": "number"
                },
                "params": {},
                "additional": {}
            },
            "setuint": {
                "title": "SetUInt",
                "template": "function-syntax",
                "description": "Set the number unsigned value to the memory address.",
                "variable": {
                    "lua": "memory:SetUInt"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "value": "number"
                },
                "additional": {}
            },
            "getuint": {
                "title": "GetUInt",
                "template": "function-syntax",
                "description": "Returns the number unsigned value at the memory address.",
                "variable": {
                    "lua": "memory:GetUInt"
                },
                "return": {
                    "lua": "number"
                },
                "params": {},
                "additional": {}
            },
            "setuint64": {
                "title": "SetUInt64",
                "template": "function-syntax",
                "description": "Set the number unsigned 64-bit value to the memory address.",
                "variable": {
                    "lua": "memory:SetUInt64"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "value": "number"
                },
                "additional": {}
            },
            "getuint64": {
                "title": "GetUInt64",
                "template": "function-syntax",
                "description": "Returns the number unsigned 64-bit value at the memory address.",
                "variable": {
                    "lua": "memory:GetUInt64"
                },
                "return": {
                    "lua": "number"
                },
                "params": {},
                "additional": {}
            },
            "setfloat": {
                "title": "SetFloat",
                "template": "function-syntax",
                "description": "Set the float value to the memory address.",
                "variable": {
                    "lua": "memory:SetFloat"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "value": "number"
                },
                "additional": {}
            },
            "getfloat": {
                "title": "GetFloat",
                "template": "function-syntax",
                "description": "Returns the float value at the memory address.",
                "variable": {
                    "lua": "memory:GetFloat"
                },
                "return": {
                    "lua": "number"
                },
                "params": {},
                "additional": {}
            },
            "setdouble": {
                "title": "SetDouble",
                "template": "function-syntax",
                "description": "Set the double value to the memory address.",
                "variable": {
                    "lua": "memory:SetDouble"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "value": "number"
                },
                "additional": {}
            },
            "getdouble": {
                "title": "GetDouble",
                "template": "function-syntax",
                "description": "Returns the double value at the memory address.",
                "variable": {
                    "lua": "memory:GetDouble"
                },
                "return": {
                    "lua": "number"
                },
                "params": {},
                "additional": {}
            },
            "setint64": {
                "title": "SetInt64",
                "template": "function-syntax",
                "description": "Set the number 64-bit value to the memory address.",
                "variable": {
                    "lua": "memory:SetInt64"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "value": "number"
                },
                "additional": {}
            },
            "getint64": {
                "title": "GetInt64",
                "template": "function-syntax",
                "description": "Returns the number 64-bit value at the memory address.",
                "variable": {
                    "lua": "memory:GetInt64"
                },
                "return": {
                    "lua": "number"
                },
                "params": {},
                "additional": {}
            },
            "loadfromaddress": {
                "title": "LoadFromAddress",
                "template": "function-syntax",
                "description": "Loads the memory from a provided address.",
                "variable": {
                    "lua": "memory:LoadFromAddress"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "address": "string"
                },
                "additional": {}
            },
            "loadfromsignature": {
                "title": "LoadFromSignature",
                "template": "function-syntax",
                "description": "Loads the memory from the provided signature.",
                "variable": {
                    "lua": "memory:LoadFromSignature"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "library": "string",
                    "signature": "string"
                },
                "additional": {}
            },
            "loadfromsignaturename": {
                "title": "LoadFromSignatureName",
                "template": "function-syntax",
                "description": "Loads the memory from the provided signature from `signatures.json`.",
                "variable": {
                    "lua": "memory:LoadFromSignatureName"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "signature": "string"
                },
                "additional": {}
            },
            "addoffset": {
                "title": "AddOffset",
                "template": "function-syntax",
                "description": "Adds an offset to the pointer which is being hold.",
                "variable": {
                    "lua": "memory:AddOffset"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "offset": "number"
                },
                "additional": {}
            },
            "removeoffset": {
                "title": "RemoveOffset",
                "template": "function-syntax",
                "description": "Removes an offset to the pointer which is being hold.",
                "variable": {
                    "lua": "memory:RemoveOffset"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "offset": "number"
                },
                "additional": {}
            },
            "addoffsetbyname": {
                "title": "AddOffsetByName",
                "template": "function-syntax",
                "description": "Adds an offset to the pointer which is being hold by the name provided from `offsets.json`.",
                "variable": {
                    "lua": "memory:AddOffsetByName"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "offsetName": "string"
                },
                "additional": {}
            },
            "removeoffsetbyname": {
                "title": "RemoveOffsetByName",
                "template": "function-syntax",
                "description": "Removes an offset to the pointer which is being hold by the name provided from `offsets.json`.",
                "variable": {
                    "lua": "memory:RemoveOffsetByName"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "offsetName": "string"
                },
                "additional": {}
            },
            "allocate": {
                "title": "Allocate",
                "template": "function-syntax",
                "description": "Allocates memory based on the specified size.",
                "variable": {
                    "lua": "memory:Allocate"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "size": "number"
                },
                "additional": {}
            },
            "deallocate": {
                "title": "Deallocate",
                "template": "function-syntax",
                "description": "Deallocates the memory stored.",
                "variable": {
                    "lua": "memory:Deallocate"
                },
                "return": {
                    "lua": "void"
                },
                "params": {},
                "additional": {}
            },
            "clear": {
                "title": "Clear",
                "template": "function-syntax",
                "description": "Clears the pointer which is being hold by the class.",
                "variable": {
                    "lua": "memory:Clear"
                },
                "return": {
                    "lua": "void"
                },
                "params": {},
                "additional": {}
            },
            "getptr": {
                "title": "GetPtr",
                "template": "function-syntax",
                "description": "Returns the pointer which is being hold by the class.",
                "variable": {
                    "lua": "memory:GetPtr"
                },
                "return": {
                    "lua": "string"
                },
                "params": {},
                "additional": {}
            },
            "isvalid": {
                "title": "IsValid",
                "template": "function-syntax",
                "description": "Checks if the pointer is null or not.",
                "variable": {
                    "lua": "memory:IsValid"
                },
                "return": {
                    "lua": "boolean"
                },
                "params": {},
                "additional": {}
            }
        }
    },
    "menus": {
        "title": "Menus",
        "description": "A list of API functions for menus.",
        "template": "category",
        "icon": "book",
        "data": {
            "register": {
                "title": "Register",
                "template": "function-syntax",
                "description": "Registers a menu by a specific ID.",
                "variable": {
                    "lua": "menus:Register"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "id": "string",
                    "title": "string",
                    "color": "string",
                    "options": "table"
                },
                "additional": {
                    "lua": "> [!note]\n> The color needs to be a hex string by the model RRGGBB.\n\n> Example: 344CEB \n\n> [!warning]\n> The options needs to be a pair of strings.\n\n```lua\n{\n    { \"option 1\", \"value 1\" },\n    { \"option 2\", \"value 2\" },\n    -- ...\n}\n```\n> [!warning]\n> The value can be replaced with a command from Swiftly and it's arguments, or it can be replaced with a menu id to open another menu.\n> The value can be also a blank string to not execute anything when it's selected. \n"
                }
            },
            "registertemporary": {
                "title": "RegisterTemporary",
                "template": "function-syntax",
                "description": "Registers a temporary menu by a specific ID.",
                "variable": {
                    "lua": "menus:RegisterTemporary"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "id": "string",
                    "title": "string",
                    "color": "string",
                    "options": "table"
                },
                "additional": {
                    "lua": "> [!note]\n> The color needs to be a hex string by the model RRGGBB.\n\n> Example: 344CEB \n\n> [!warning]\n> The options needs to be a pair of strings.\n\n```lua\n{\n    { \"option 1\", \"value 1\" },\n    { \"option 2\", \"value 2\" },\n    -- ...\n}\n```\n> [!warning]\n> The value can be replaced with a command from Swiftly and it's arguments, or it can be replaced with a menu id to open another menu.\n> The value can be also a blank string to not execute anything when it's selected. \n"
                }
            },
            "unregister": {
                "title": "UnregisterMenu",
                "template": "function-syntax",
                "description": "Unregistered a menu by the specified id.\n> [!note]\n> It can unregister only the menus which were created from the inside of the plugin. \n",
                "variable": {
                    "lua": "menus:Unregister"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "id": "string"
                },
                "additional": {}
            }
        }
    },
    "player": {
        "title": "Player",
        "description": "A list of API functions for a player.",
        "template": "category",
        "icon": "user",
        "data": {
            "isvalid": {
                "title": "IsValid",
                "template": "function-syntax",
                "description": "Checks if it's a valid player.",
                "variable": {
                    "lua": "player:IsValid"
                },
                "return": {
                    "lua": "boolean"
                },
                "params": {},
                "additional": {}
            },
            "cbaseentity": {
                "title": "CBaseEntity",
                "template": "function-syntax",
                "description": "Returns the player's CBaseEntity based of CCSPlayerPawn.",
                "variable": {
                    "lua": "player:CBaseEntity"
                },
                "return": {
                    "lua": "CBaseEntity"
                },
                "params": {},
                "additional": {}
            },
            "cbaseplayercontroller": {
                "title": "CBasePlayerController",
                "template": "function-syntax",
                "description": "Returns the player's CBasePlayerController.",
                "variable": {
                    "lua": "player:CBasePlayerController"
                },
                "return": {
                    "lua": "CBasePlayerController"
                },
                "params": {},
                "additional": {}
            },
            "cbaseplayerpawn": {
                "title": "CBasePlayerPawn",
                "template": "function-syntax",
                "description": "Returns the player's CBasePlayerPawn.",
                "variable": {
                    "lua": "player:CBasePlayerPawn"
                },
                "return": {
                    "lua": "CBasePlayerPawn"
                },
                "params": {},
                "additional": {}
            },
            "ccsplayercontroller": {
                "title": "CCSPlayerController",
                "template": "function-syntax",
                "description": "Returns the player's CCSPlayerController.",
                "variable": {
                    "lua": "player:CCSPlayerController"
                },
                "return": {
                    "lua": "CCSPlayerController"
                },
                "params": {},
                "additional": {}
            },
            "ccsplayerpawn": {
                "title": "CCSPlayerPawn",
                "template": "function-syntax",
                "description": "Returns the player's CCSPlayerPawn.",
                "variable": {
                    "lua": "player:CCSPlayerPawn"
                },
                "return": {
                    "lua": "CCSPlayerPawn"
                },
                "params": {},
                "additional": {}
            },
            "ccsplayerpawnbase": {
                "title": "CCSPlayerPawnBase",
                "template": "function-syntax",
                "description": "Returns the player's CCSPlayerPawnBase.",
                "variable": {
                    "lua": "player:CCSPlayerPawnBase"
                },
                "return": {
                    "lua": "CCSPlayerPawnBase"
                },
                "params": {},
                "additional": {}
            },
            "drop": {
                "title": "Drop",
                "template": "function-syntax",
                "description": "Drops the client from the server.",
                "variable": {
                    "lua": "player:Drop"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "reason": "DisconnectReason"
                },
                "additional": {}
            },
            "getchattag": {
                "title": "GetChatTag",
                "template": "function-syntax",
                "description": "Returns the chat tag of the player.",
                "variable": {
                    "lua": "player:GetChatTag"
                },
                "return": {
                    "lua": "string"
                },
                "params": {},
                "additional": {}
            },
            "setchattag": {
                "title": "SetChatTag",
                "template": "function-syntax",
                "description": "Sets the chat tag of the player.",
                "variable": {
                    "lua": "player:SetChatTag"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "tag": "string"
                },
                "additional": {}
            },
            "getchattagcolor": {
                "title": "GetChatTagColor",
                "template": "function-syntax",
                "description": "Returns the chat tag color of the player.",
                "variable": {
                    "lua": "player:GetChatTagColor"
                },
                "return": {
                    "lua": "string"
                },
                "params": {},
                "additional": {}
            },
            "setchattagcolor": {
                "title": "SetChatTagColor",
                "template": "function-syntax",
                "description": "Sets the chat tag color of the player.",
                "variable": {
                    "lua": "player:SetChatTagColor"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "color": "string"
                },
                "additional": {}
            },
            "getnamecolor": {
                "title": "GetNameColor",
                "template": "function-syntax",
                "description": "Returns the name color of the player.",
                "variable": {
                    "lua": "player:GetNameColor"
                },
                "return": {
                    "lua": "string"
                },
                "params": {},
                "additional": {}
            },
            "setnamecolor": {
                "title": "SetNameColor",
                "template": "function-syntax",
                "description": "Sets the name color of the player.",
                "variable": {
                    "lua": "player:SetNameColor"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "color": "string"
                },
                "additional": {}
            },
            "getchatcolor": {
                "title": "GetChatColor",
                "template": "function-syntax",
                "description": "Returns the chat color of the player.",
                "variable": {
                    "lua": "player:GetChatColor"
                },
                "return": {
                    "lua": "string"
                },
                "params": {},
                "additional": {}
            },
            "setchatcolor": {
                "title": "SetChatColor",
                "template": "function-syntax",
                "description": "Sets the chat color of the player.",
                "variable": {
                    "lua": "player:SetChatColor"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "color": "string"
                },
                "additional": {}
            },
            "executecommand": {
                "title": "ExecuteCommand",
                "template": "function-syntax",
                "description": "Executes a command on behalf of a player.",
                "variable": {
                    "lua": "player:ExecuteCommand"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "command": "string"
                },
                "additional": {}
            },
            "getconvar": {
                "title": "GetConvar",
                "template": "function-syntax",
                "description": "Returns the convar value of the player.",
                "variable": {
                    "lua": "player:GetConvar"
                },
                "return": {
                    "lua": "string"
                },
                "params": {
                    "convar": "string"
                },
                "additional": {}
            },
            "setconvar": {
                "title": "SetConvar",
                "template": "function-syntax",
                "description": "Sets the convar value of the player.",
                "variable": {
                    "lua": "player:SetConvar"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "convar": "string",
                    "value": "string"
                },
                "additional": {}
            },
            "getipaddress": {
                "title": "GetIPAddress",
                "template": "function-syntax",
                "description": "Returns the IP address of the player.",
                "variable": {
                    "lua": "player:GetIPAddress"
                },
                "return": {
                    "lua": "string"
                },
                "params": {},
                "additional": {}
            },
            "getslot": {
                "title": "GetSlot",
                "template": "function-syntax",
                "description": "Returns the slot of the player.",
                "variable": {
                    "lua": "player:GetSlot"
                },
                "return": {
                    "lua": "number"
                },
                "params": {},
                "additional": {}
            },
            "getsteamid": {
                "title": "GetSteamID",
                "template": "function-syntax",
                "description": "Returns the SteamID64 of the player.",
                "variable": {
                    "lua": "player:GetSteamID"
                },
                "return": {
                    "lua": "number"
                },
                "params": {},
                "additional": {}
            },
            "getconnectedtime": {
                "title": "GetConnectedTime",
                "template": "function-syntax",
                "description": "Returns the connected time of the player.",
                "variable": {
                    "lua": "player:GetConnectedTime"
                },
                "return": {
                    "lua": "number"
                },
                "params": {},
                "additional": {}
            },
            "getsteamid2": {
                "title": "GetSteamID2",
                "template": "function-syntax",
                "description": "Returns the SteamID of the player.",
                "variable": {
                    "lua": "player:GetSteamID2"
                },
                "return": {
                    "lua": "string"
                },
                "params": {},
                "additional": {}
            },
            "hidemenu": {
                "title": "HideMenu",
                "template": "function-syntax",
                "description": "Hides the player menu.",
                "variable": {
                    "lua": "player:HideMenu"
                },
                "return": {
                    "lua": "void"
                },
                "params": {},
                "additional": {}
            },
            "showmenu": {
                "title": "ShowMenu",
                "template": "function-syntax",
                "description": "Shows the player a menu based of the provided id.",
                "variable": {
                    "lua": "player:ShowMenu"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "menuid": "string"
                },
                "additional": {}
            },
            "getvar": {
                "title": "GetVar",
                "template": "function-syntax",
                "description": "Returns the variable value of the player.",
                "variable": {
                    "lua": "player:GetVar"
                },
                "return": {
                    "lua": "any"
                },
                "params": {
                    "key": "string"
                },
                "additional": {}
            },
            "setvar": {
                "title": "SetVar",
                "template": "function-syntax",
                "description": "Sets the variable value of the player.",
                "variable": {
                    "lua": "player:SetVar"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "key": "string",
                    "value": "any"
                },
                "additional": {}
            },
            "isfakeclient": {
                "title": "IsFakeClient",
                "template": "function-syntax",
                "description": "Checks if the player is a bot.",
                "variable": {
                    "lua": "player:IsFakeClient"
                },
                "return": {
                    "lua": "boolean"
                },
                "params": {},
                "additional": {}
            },
            "isfirstspawn": {
                "title": "IsFirstSpawn",
                "template": "function-syntax",
                "description": "Checks if the player is at the first spawn.",
                "variable": {
                    "lua": "player:IsFirstSpawn"
                },
                "return": {
                    "lua": "boolean"
                },
                "params": {},
                "additional": {}
            },
            "kill": {
                "title": "Kill",
                "template": "function-syntax",
                "description": "Kills the player.",
                "variable": {
                    "lua": "player:Kill"
                },
                "return": {
                    "lua": "void"
                },
                "params": {},
                "additional": {}
            },
            "respawn": {
                "title": "Respawn",
                "template": "function-syntax",
                "description": "Respawns the player.",
                "variable": {
                    "lua": "player:Respawn"
                },
                "return": {
                    "lua": "void"
                },
                "params": {},
                "additional": {}
            },
            "sendmsg": {
                "title": "SendMsg",
                "template": "function-syntax",
                "description": "Sends a message to the players.",
                "variable": {
                    "lua": "player:SendMsg"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "msgType": "MessageType",
                    "text": "string"
                },
                "additional": {
                    "lua": "\n\n## Colors\nBelow there are listed all the supported colors by Swiftly:\n```\n{DEFAULT}\n{WHITE}\n{DARKRED}\n{LIGHTPURPLE}\n{GREEN}\n{OLIVE}\n{LIME}\n{RED}\n{GRAY}\n{GREY}\n{LIGHTYELLOW}\n{YELLOW}\n{SILVER}\n{BLUEGREY}\n{LIGHTBLUE}\n{BLUE}\n{DARKBLUE}\n{PURPLE}\n{MAGENTA}\n{LIGHTRED}\n{GOLD}\n{ORANGE}\n{TEAMCOLOR}\n```"
                }
            },
            "switchteam": {
                "title": "SwitchTeam",
                "template": "function-syntax",
                "description": "Switches the player's team.",
                "variable": {
                    "lua": "player:SwitchTeam"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "team": "Team"
                },
                "additional": {}
            },
            "changeteam": {
                "title": "ChangeTeam",
                "template": "function-syntax",
                "description": "Changes the player's team.",
                "variable": {
                    "lua": "player:ChangeTeam"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "team": "Team"
                },
                "additional": {}
            },
            "getlistening": {
                "title": "GetListening",
                "template": "function-syntax",
                "description": "Returns the listening override of a specific player.",
                "variable": {
                    "lua": "player:GetListening"
                },
                "return": {
                    "lua": "ListenOverride"
                },
                "params": {
                    "id": "number"
                },
                "additional": {}
            },
            "setlistening": {
                "title": "SetListening",
                "template": "function-syntax",
                "description": "Sets the listening override of a specific player.",
                "variable": {
                    "lua": "player:SetListening"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "id": "number",
                    "override": "ListenOverride"
                },
                "additional": {}
            },
            "getbunnyhop": {
                "title": "GetBunnyhop",
                "template": "function-syntax",
                "description": "Returns if the player can bunnyhop.",
                "variable": {
                    "lua": "player:GetBunnyhop"
                },
                "return": {
                    "lua": "boolean"
                },
                "params": {},
                "additional": {}
            },
            "setbunnyhop": {
                "title": "SetBunnyhop",
                "template": "function-syntax",
                "description": "Sets the ability to bunnyhop to the player.",
                "variable": {
                    "lua": "player:SetBunnyhop"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "state": "boolean"
                },
                "additional": {}
            },
            "islisteningtogameevent": {
                "title": "IsListeningToGameEvent",
                "template": "function-syntax",
                "description": "Checks if a player is listening to a game event.",
                "variable": {
                    "lua": "player:IsListeningToGameEvent"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "game_event": "string"
                },
                "additional": {}
            },
            "queryconvar": {
                "title": "QueryConvar",
                "template": "function-syntax",
                "description": "Queries a convar from a player.",
                "variable": {
                    "lua": "player:QueryConvar"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "convar_name": "string"
                },
                "additional": {}
            },
            "getvoiceflags": {
                "title": "GetVoiceFlags",
                "template": "function-syntax",
                "description": "Returns the voice flags of the player.",
                "variable": {
                    "lua": "player:GetVoiceFlags"
                },
                "return": {
                    "lua": "number"
                },
                "params": {},
                "additional": {}
            },
            "setvoiceflags": {
                "title": "SetVoiceFlags",
                "template": "function-syntax",
                "description": "Sets the voice flags of the player.",
                "variable": {
                    "lua": "player:SetVoiceFlags"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "flags": "number"
                },
                "additional": {}
            },
            "getweaponmanager": {
                "title": "GetWeaponManager",
                "template": "function-syntax",
                "description": "Returns the Weapon Manager for the player.",
                "variable": {
                    "lua": "player:GetWeaponManager"
                },
                "return": {
                    "lua": "WeaponManager"
                },
                "params": {},
                "additional": {}
            }
        }
    },
    "pmanager": {
        "title": "Player Manager",
        "description": "A list of API functions for player manager.",
        "template": "category",
        "icon": "users",
        "data": {
            "getplayercount": {
                "title": "GetPlayerCount",
                "template": "function-syntax",
                "description": "Returns the number of players from the server.",
                "variable": {
                    "lua": "playermanager:GetPlayerCount"
                },
                "return": {
                    "lua": "number"
                },
                "params": {},
                "additional": {}
            },
            "getplayercap": {
                "title": "GetPlayerCap",
                "template": "function-syntax",
                "description": "Returns the player maximum capacity for the server.",
                "variable": {
                    "lua": "playermanager:GetPlayerCap"
                },
                "return": {
                    "lua": "number"
                },
                "params": {},
                "additional": {}
            },
            "sendmsg": {
                "title": "SendMsg",
                "template": "function-syntax",
                "description": "Sends a message to all the online players.",
                "variable": {
                    "lua": "playermanager:SendMsg"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "msgType": "MessageType",
                    "text": "string"
                },
                "additional": {
                    "lua": "\n\n## Colors\nBelow there are listed all the supported colors by Swiftly:\n```\n{DEFAULT}\n{WHITE}\n{DARKRED}\n{LIGHTPURPLE}\n{GREEN}\n{OLIVE}\n{LIME}\n{RED}\n{GRAY}\n{GREY}\n{LIGHTYELLOW}\n{YELLOW}\n{SILVER}\n{BLUEGREY}\n{LIGHTBLUE}\n{BLUE}\n{DARKBLUE}\n{PURPLE}\n{MAGENTA}\n{LIGHTRED}\n{GOLD}\n{ORANGE}\n{TEAMCOLOR}\n```"
                }
            }
        }
    },
    "precacher": {
        "title": "Precacher",
        "description": "A list of API functions for precaching files.",
        "template": "category",
        "icon": "hard-drive",
        "data": {
            "precachemodel": {
                "title": "PrecacheModel",
                "template": "function-syntax",
                "description": "Adds a model to precache.",
                "variable": {
                    "lua": "precacher:PrecacheModel"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "model": "string"
                },
                "additional": {}
            },
            "precachesound": {
                "title": "PrecacheSound",
                "template": "function-syntax",
                "description": "Adds a sound to precache.",
                "variable": {
                    "lua": "precacher:PrecacheSound"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "path": "string"
                },
                "additional": {}
            }
        }
    },
    "server": {
        "title": "Server",
        "description": "A list of API functions for server.",
        "template": "category",
        "icon": "server",
        "data": {
            "terminateround": {
                "title": "TerminateRound",
                "template": "function-syntax",
                "description": "Ends a round with a delay and with a reason.",
                "variable": {
                    "lua": "server:TerminateRound"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "delay": "number",
                    "reason": "RoundEndReason_t"
                },
                "additional": {}
            },
            "getip": {
                "title": "GetIP",
                "template": "function-syntax",
                "description": "Returns the server's IP Address.",
                "variable": {
                    "lua": "server:GetIP"
                },
                "return": {
                    "lua": "string"
                },
                "params": {},
                "additional": {}
            },
            "getmap": {
                "title": "GetMap",
                "template": "function-syntax",
                "description": "Returns the current map name.",
                "variable": {
                    "lua": "server:GetMap"
                },
                "return": {
                    "lua": "string"
                },
                "params": {},
                "additional": {}
            },
            "ismapvalid": {
                "title": "IsMapValid",
                "template": "function-syntax",
                "description": "Returns the current map name.",
                "variable": {
                    "lua": "server:IsMapValid"
                },
                "return": {
                    "lua": "boolean"
                },
                "params": {
                    "map": "string"
                },
                "additional": {}
            },
            "changemap": {
                "title": "ChangeMap",
                "template": "function-syntax",
                "description": "Change the map in the specified one.",
                "variable": {
                    "lua": "server:ChangeMap"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "map": "string",
                    "workshop": "boolean"
                },
                "additional": {}
            },
            "getmaxplayers": {
                "title": "GetMaxPlayers",
                "template": "function-syntax",
                "description": "Returns the maximum capacity of players on the server.",
                "variable": {
                    "lua": "server:GetMaxPlayers"
                },
                "return": {
                    "lua": "number"
                },
                "params": {},
                "additional": {}
            },
            "execute": {
                "title": "Execute",
                "template": "function-syntax",
                "description": "Executes a command in the server console.",
                "variable": {
                    "lua": "server:Execute"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "command": "string"
                },
                "additional": {}
            },
            "getcurrenttime": {
                "title": "GetCurrentTime",
                "template": "function-syntax",
                "description": "Returns the current time on the server.",
                "variable": {
                    "lua": "server:GetCurrentTime"
                },
                "return": {
                    "lua": "number"
                },
                "params": {},
                "additional": {}
            },
            "gettickcount": {
                "title": "GetTickCount",
                "template": "function-syntax",
                "description": "Returns the tick count on the server.",
                "variable": {
                    "lua": "server:GetTickCount"
                },
                "return": {
                    "lua": "number"
                },
                "params": {},
                "additional": {}
            }
        }
    },
    "timers": {
        "title": "Timers",
        "description": "A list of API functions for timers.",
        "template": "category",
        "icon": "clock",
        "data": {
            "settimeout": {
                "title": "SetTimeout",
                "template": "function-syntax",
                "description": "Executes a callback after the specified delay.",
                "variable": {
                    "lua": "SetTimeout"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "delay": "number",
                    "callback": "function"
                },
                "additional": {}
            },
            "settimer": {
                "title": "SetTimer",
                "template": "function-syntax",
                "description": "Executes a callback at the specified interval.",
                "variable": {
                    "lua": "SetTimer"
                },
                "return": {
                    "lua": "TimerHandle"
                },
                "params": {
                    "delay": "number",
                    "callback": "function"
                },
                "additional": {}
            },
            "stoptimer": {
                "title": "StopTimer",
                "template": "function-syntax",
                "description": "Stops the timer.",
                "variable": {
                    "lua": "StopTimer"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "timerid": "TimerHandle"
                },
                "additional": {}
            },
            "nexttick": {
                "title": "NextTick",
                "template": "function-syntax",
                "description": "Executes the callback the next tick.",
                "variable": {
                    "lua": "NextTick"
                },
                "return": {
                    "lua": "void"
                },
                "params": {
                    "callback": "function"
                },
                "additional": {}
            }
        }
    },
    "translation": {
        "title": "Translation",
        "description": "A list of API functions for translation files.",
        "template": "category",
        "icon": "globe",
        "data": {
            "getting-started": {
                "title": "Getting Started",
                "template": "getting-started",
                "description": "To use Swiftly Translation system you need to create a `JSON` file in `translations` folder with the following schema:",
                "content": {
                    "lua": "#### File Name\n```\ntranslation.MAIN_TRANSLATION_KEY.json\n```\n\n#### File Content\n```json\n{\n    \"key1.key2\": {\n        \"en\": \"English Translation\",\n        \"ro\": \"Traducere Română\"\n    },\n    ...\n}\n```"
                }
            },
            "fetchtranslation": {
                "title": "FetchTranslation",
                "template": "function-syntax",
                "description": "Returns the translation for the specified key.\n> [!warning]\n> the translation key is non-existent for the specified language in core.json, it returns the the translation key.\n\n> [!note]\n> Key Format: MAIN_TRANSLATION_KEY.TRANSLATION_KEY\n\n> Example: test_plugin.core.started\n\n",
                "variable": {
                    "lua": "FetchTranslation"
                },
                "return": {
                    "lua": "string"
                },
                "params": {
                    "key": "string",
                    "playerid": "number/nil"
                },
                "additional": {}
            }
        }
    },
    "utils": {
        "title": "Utils",
        "description": "A list of API functions for Swiftly Utils.",
        "template": "category",
        "icon": "laptop-code",
        "data": {
            "time": {
                "title": "Time",
                "description": "A list of API functions for Swiftly Time Utils.",
                "template": "category",
                "icon": "clock",
                "data": {
                    "gettime": {
                        "title": "GetTime",
                        "template": "function-syntax",
                        "description": "Returns the current UNIX time in milliseconds.",
                        "variable": {
                            "lua": "GetTime"
                        },
                        "return": {
                            "lua": "number"
                        },
                        "params": {},
                        "additional": {}
                    }
                }
            },
            "os": {
                "title": "OS",
                "description": "A list of API functions for Swiftly OS Utils.",
                "template": "category",
                "icon": "computer",
                "data": {
                    "getos": {
                        "title": "GetOS",
                        "template": "function-syntax",
                        "description": "Returns the current OS.",
                        "variable": {
                            "lua": "GetOS"
                        },
                        "return": {
                            "lua": "string"
                        },
                        "params": {},
                        "additional": {}
                    },
                    "iswindows": {
                        "title": "IsWindows",
                        "template": "function-syntax",
                        "description": "Checks if the current OS is Windows.",
                        "variable": {
                            "lua": "IsWindows"
                        },
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {},
                        "additional": {}
                    },
                    "islinux": {
                        "title": "IsLinux",
                        "template": "function-syntax",
                        "description": "Checks if the current OS is Linux.",
                        "variable": {
                            "lua": "IsLinux"
                        },
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {},
                        "additional": {}
                    }
                }
            },
            "json": {
                "title": "JSON",
                "description": "A list of API functions for Swiftly Time Utils.",
                "template": "category",
                "icon": "arrow-to-dot",
                "data": {
                    "encode": {
                        "title": "Encode",
                        "template": "function-syntax",
                        "description": "Encodes a value into a json string.",
                        "variable": {
                            "lua": "json.encode"
                        },
                        "return": {
                            "lua": "string"
                        },
                        "params": {
                            "value": "any",
                            "options": "table (optional)"
                        },
                        "additional": {
                            "lua": "#### Options\nThe options table can have the following fields:\n```lua\n{\n    indent, --[[ number ]]\n}\n```"
                        }
                    },
                    "decode": {
                        "title": "Decode",
                        "template": "function-syntax",
                        "description": "Decodes a JSON string into a table.",
                        "variable": {
                            "lua": "json.decode"
                        },
                        "return": {
                            "lua": "table"
                        },
                        "params": {
                            "str": "string"
                        },
                        "additional": {}
                    }
                }
            },
            "targetselector": {
                "title": "Target Selector",
                "description": "A list of API functions for Swiftly Target Selector Utils.",
                "template": "category",
                "icon": "user",
                "data": {
                    "getplayer": {
                        "title": "GetPlayer",
                        "template": "function-syntax",
                        "description": "Returns the player object from playerid.",
                        "variable": {
                            "lua": "GetPlayer"
                        },
                        "return": {
                            "lua": "Player"
                        },
                        "params": {
                            "playerid": "number"
                        },
                        "additional": {}
                    },
                    "findplayersbytarget": {
                        "title": "FindPlayersByTarget",
                        "template": "function-syntax",
                        "description": "Returns the players which could be selected using the target.",
                        "variable": {
                            "lua": "FindPlayersByTarget"
                        },
                        "return": {
                            "lua": "table of Player"
                        },
                        "params": {
                            "target": "string",
                            "matchbots": "boolean"
                        },
                        "additional": {
                            "lua": "#### Target Options\nThe supported target options are the following:\n```\n@ct - Only CT\n@t - Only T\n@spec - Only Spectators\n@alive - Alive Players\n@dying - Dying players\n@dead - Dead players\n@all - All players\n#USERID - By userid\nSTEAMID64 - By SteamID64\nSTEAMID - By SteamID\nNAME - By Partial Name\n```\nMore targets can be added using the event `FindPlayerByTarget`."
                        }
                    }
                }
            },
            "misc": {
                "title": "Misc",
                "description": "A list of API functions for Swiftly Misc Utils.",
                "template": "category",
                "icon": "laptop-code",
                "data": {
                    "stateupdate": {
                        "title": "StateUpdate",
                        "template": "function-syntax",
                        "description": "Updates the state of a specific field.",
                        "variable": {
                            "lua": "StateUpdate"
                        },
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "ptr": "string",
                            "classname": "string",
                            "field": "string",
                            "isStruct": "boolean"
                        },
                        "additional": {}
                    },
                    "getusermessage": {
                        "title": "GetUserMessage",
                        "template": "function-syntax",
                        "description": "Returns the user message from uuid.",
                        "variable": {
                            "lua": "GetUserMessage"
                        },
                        "return": {
                            "lua": "UserMessage"
                        },
                        "params": {
                            "uuid": "string"
                        },
                        "additional": {}
                    },
                    "uuid": {
                        "title": "UUID",
                        "template": "function-syntax",
                        "description": "Generates an UUID v4.",
                        "variable": {
                            "lua": "uuid"
                        },
                        "return": {
                            "lua": "string"
                        },
                        "params": {},
                        "additional": {}
                    },
                    "replytocommand": {
                        "title": "ReplyToCommand",
                        "template": "function-syntax",
                        "description": "Replies to a command via console if playerid is -1 or chat.",
                        "variable": {
                            "lua": "ReplyToCommand"
                        },
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "playerid": "number",
                            "prefix": "string",
                            "text": "string"
                        },
                        "additional": {}
                    },
                    "computeprettytime": {
                        "title": "ComputePrettyTime",
                        "template": "function-syntax",
                        "description": "Transforms seconds into a pretty string format.",
                        "variable": {
                            "lua": "ComputePrettyTime"
                        },
                        "return": {
                            "lua": "string"
                        },
                        "params": {
                            "seconds": "number"
                        },
                        "additional": {}
                    },
                    "stringsplit": {
                        "title": "String Split",
                        "template": "function-syntax",
                        "description": "Splits a string into a table of strings.",
                        "variable": {
                            "lua": "string.split"
                        },
                        "return": {
                            "lua": "table"
                        },
                        "params": {
                            "str": "string",
                            "delimiter": "string"
                        },
                        "additional": {}
                    },
                    "stringtrim": {
                        "title": "String Trim",
                        "template": "function-syntax",
                        "description": "Trims a string.",
                        "variable": {
                            "lua": "string.trim"
                        },
                        "return": {
                            "lua": "string"
                        },
                        "params": {
                            "str": "string"
                        },
                        "additional": {}
                    },
                    "getccsgamerules": {
                        "title": "GetCCSGameRules",
                        "template": "function-syntax",
                        "description": "Returns the CCSGameRules of the server.",
                        "variable": {
                            "lua": "GetCCSGameRules"
                        },
                        "return": {
                            "lua": "CCSGameRules"
                        },
                        "params": {},
                        "additional": {}
                    },
                    "switch": {
                        "title": "Switch",
                        "template": "function-syntax",
                        "description": "Allows for a switch-like behavior in Lua, matching a value against a set of cases. It supports functions or direct values for each case and includes a default fallback.",
                        "variable": {
                            "lua": "switch"
                        },
                        "return": {
                            "lua": "any"
                        },
                        "params": {
                            "key": "string",
                            "switch_table": "table"
                        },
                        "additional": {
                            "lua": "#### Example\n```lua\nlocal result = switch(\"hello\", {\n    hello = function() return \"world\" end,\n    goodbye = \"farewell\",\n    default = function() return \"unknown\" end\n})\nprint(result) -- Output: world\n```"
                        }
                    },
                    "tablemap": {
                        "title": "Table Map",
                        "template": "function-syntax",
                        "description": "Maps a given function to each element in a table, returning a new table with the transformed values.",
                        "variable": {
                            "lua": "table.map"
                        },
                        "return": {
                            "lua": "table"
                        },
                        "params": {
                            "tbl": "table",
                            "callback": "fun(element:any):boolean"
                        },
                        "additional": {}
                    },
                    "tablefilter": {
                        "title": "Table Filter",
                        "template": "function-syntax",
                        "description": "Filters elements of a table based on a provided predicate function, returning a new table with elements that satisfy the condition.",
                        "variable": {
                            "lua": "table.filter"
                        },
                        "return": {
                            "lua": "table"
                        },
                        "params": {
                            "tbl": "table",
                            "callback": "fun(element:any):boolean"
                        },
                        "additional": {}
                    },
                    "tablecontains": {
                        "title": "Table Contains",
                        "template": "function-syntax",
                        "description": "Checks if a table contains a specific value.",
                        "variable": {
                            "lua": "table.contains"
                        },
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {
                            "tbl": "table",
                            "element": "any"
                        },
                        "additional": {}
                    },
                    "tablefind": {
                        "title": "Table Find",
                        "template": "function-syntax",
                        "description": "Return the index of the value.",
                        "variable": {
                            "lua": "table.find"
                        },
                        "return": {
                            "lua": "number|nil"
                        },
                        "params": {
                            "tbl": "table",
                            "element": "any"
                        },
                        "additional": {}
                    },
                    "isvaliditem": {
                        "title": "IsValidItem",
                        "template": "function-syntax",
                        "description": "Checks if the provided item name is valid.",
                        "variable": {
                            "lua": "IsValidItem"
                        },
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {
                            "name": "string"
                        },
                        "additional": {}
                    },
                    "isvalidweapon": {
                        "title": "IsValidWeapon",
                        "template": "function-syntax",
                        "description": "Checks if the provided weapon name is valid.",
                        "variable": {
                            "lua": "IsValidWeapon"
                        },
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {
                            "name": "string"
                        },
                        "additional": {}
                    }
                }
            }
        }
    },
    "usermessages": {
        "title": "User Messages",
        "description": "A list of API functions for user messages.",
        "template": "category",
        "icon": "message",
        "data": {
            "usermessage": {
                "title": "UserMessage",
                "description": "A user message is a wrapper for protobuf messages.",
                "template": "class-syntax",
                "languages": [
                    "lua"
                ],
                "constructor": {
                    "partial_message_name": "string"
                },
                "properties": {},
                "functions": {
                    "IsValidMessage": {
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {}
                    },
                    "GetMessageName": {
                        "return": {
                            "lua": "string"
                        },
                        "params": {}
                    },
                    "GetMessageID": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {}
                    },
                    "HasField": {
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {
                            "fieldName": "string"
                        }
                    },
                    "GetInt32": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string"
                        }
                    },
                    "SetInt32": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "number"
                        }
                    },
                    "GetRepeatedInt32": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number"
                        }
                    },
                    "SetRepeatedInt32": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number",
                            "value": "number"
                        }
                    },
                    "AddInt32": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number"
                        }
                    },
                    "GetInt64": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string"
                        }
                    },
                    "SetInt64": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "number"
                        }
                    },
                    "GetRepeatedInt64": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number"
                        }
                    },
                    "SetRepeatedInt64": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number",
                            "value": "number"
                        }
                    },
                    "AddInt64": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "number"
                        }
                    },
                    "GetUInt32": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string"
                        }
                    },
                    "SetUInt32": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "number"
                        }
                    },
                    "GetRepeatedUInt32": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number"
                        }
                    },
                    "SetRepeatedUInt32": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number",
                            "value": "number"
                        }
                    },
                    "AddUInt32": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "number"
                        }
                    },
                    "GetUInt64": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string"
                        }
                    },
                    "SetUInt64": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "number"
                        }
                    },
                    "GetRepeatedUInt64": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number"
                        }
                    },
                    "SetRepeatedUInt64": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number",
                            "value": "number"
                        }
                    },
                    "AddUInt64": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "number"
                        }
                    },
                    "GetInt64OrUnsigned": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string"
                        }
                    },
                    "SetInt64OrUnsigned": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "number"
                        }
                    },
                    "GetRepeatedInt64OrUnsigned": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number"
                        }
                    },
                    "SetRepeatedInt64OrUnsigned": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number",
                            "value": "number"
                        }
                    },
                    "AddInt64OrUnsigned": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "number"
                        }
                    },
                    "GetBool": {
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {
                            "fieldName": "string"
                        }
                    },
                    "SetBool": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "boolean"
                        }
                    },
                    "GetRepeatedBool": {
                        "return": {
                            "lua": "boolean"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number"
                        }
                    },
                    "SetRepeatedBool": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number",
                            "value": "boolean"
                        }
                    },
                    "AddBool": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "boolean"
                        }
                    },
                    "GetFloat": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string"
                        }
                    },
                    "SetFloat": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "number"
                        }
                    },
                    "GetRepeatedFloat": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number"
                        }
                    },
                    "SetRepeatedFloat": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number",
                            "value": "number"
                        }
                    },
                    "AddFloat": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "number"
                        }
                    },
                    "GetDouble": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string"
                        }
                    },
                    "SetDouble": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "number"
                        }
                    },
                    "GetRepeatedDouble": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number"
                        }
                    },
                    "SetRepeatedDouble": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number",
                            "value": "number"
                        }
                    },
                    "AddDouble": {
                        "return": {
                            "lua": "number",
                            "value": "number"
                        },
                        "params": {
                            "fieldName": "string"
                        }
                    },
                    "GetFloatOrDouble": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string"
                        }
                    },
                    "SetFloatOrDouble": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "number"
                        }
                    },
                    "GetRepeatedFloatOrDouble": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number"
                        }
                    },
                    "SetRepeatedFloatOrDouble": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number",
                            "value": "number"
                        }
                    },
                    "AddFloatOrDouble": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "number"
                        }
                    },
                    "GetString": {
                        "return": {
                            "lua": "string"
                        },
                        "params": {
                            "fieldName": "string"
                        }
                    },
                    "SetString": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "string"
                        }
                    },
                    "GetRepeatedString": {
                        "return": {
                            "lua": "string"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number"
                        }
                    },
                    "SetRepeatedString": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number",
                            "value": "string"
                        }
                    },
                    "AddString": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "string"
                        }
                    },
                    "GetColor": {
                        "return": {
                            "lua": "Color"
                        },
                        "params": {
                            "fieldName": "string"
                        }
                    },
                    "SetColor": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "Color"
                        }
                    },
                    "GetRepeatedColor": {
                        "return": {
                            "lua": "Color"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number"
                        }
                    },
                    "SetRepeatedColor": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number",
                            "value": "Color"
                        }
                    },
                    "AddColor": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "Color"
                        }
                    },
                    "GetVector2D": {
                        "return": {
                            "lua": "Vector2D"
                        },
                        "params": {
                            "fieldName": "string"
                        }
                    },
                    "SetVector2D": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "Vector2D"
                        }
                    },
                    "GetRepeatedVector2D": {
                        "return": {
                            "lua": "Vector2D"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number"
                        }
                    },
                    "SetRepeatedVector2D": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number",
                            "value": "Vector2D"
                        }
                    },
                    "AddVector2D": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "Vector2D"
                        }
                    },
                    "GetVector": {
                        "return": {
                            "lua": "Vector"
                        },
                        "params": {
                            "fieldName": "string"
                        }
                    },
                    "SetVector": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "Vector"
                        }
                    },
                    "GetRepeatedVector": {
                        "return": {
                            "lua": "Vector"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number"
                        }
                    },
                    "SetRepeatedVector": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number",
                            "value": "Vector"
                        }
                    },
                    "AddVector": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "Vector"
                        }
                    },
                    "GetQAngle": {
                        "return": {
                            "lua": "QAngle"
                        },
                        "params": {
                            "fieldName": "string"
                        }
                    },
                    "SetQAngle": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "QAngle"
                        }
                    },
                    "GetRepeatedQAngle": {
                        "return": {
                            "lua": "QAngle"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number"
                        }
                    },
                    "SetRepeatedQAngle": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number",
                            "value": "QAngle"
                        }
                    },
                    "AddQAngle": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "value": "QAngle"
                        }
                    },
                    "RemoveRepeatedFieldValue": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number"
                        }
                    },
                    "GetRepeatedFieldCount": {
                        "return": {
                            "lua": "number"
                        },
                        "params": {
                            "fieldName": "string"
                        }
                    },
                    "GetMessage": {
                        "return": {
                            "lua": "UserMessage"
                        },
                        "params": {
                            "fieldName": "string"
                        }
                    },
                    "GetRepeatedMessage": {
                        "return": {
                            "lua": "UserMessage"
                        },
                        "params": {
                            "fieldName": "string",
                            "index": "number"
                        }
                    },
                    "AddMessage": {
                        "return": {
                            "lua": "UserMessage"
                        },
                        "params": {
                            "fieldName": "string"
                        }
                    },
                    "SendToPlayer": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "playerid": "number"
                        }
                    },
                    "SendToAllPlayers": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {}
                    },
                    "AddClient": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "playerid": "number"
                        }
                    },
                    "RemoveClient": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "playerid": "number"
                        }
                    },
                    "ClearClients": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {}
                    },
                    "AddClients": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {}
                    },
                    "GetClients": {
                        "return": {
                            "lua": "table"
                        },
                        "params": {}
                    }
                },
                "additional": {}
            },
            "list": {
                "title": "User Messages List",
                "template": "description",
                "description": "A list of all user messages can be found at the following link:\n[https://gist.github.com/psychonic/f529f20a02f6d78d56513127ff720683#file-usermessages-proto](https://gist.github.com/psychonic/f529f20a02f6d78d56513127ff720683#file-usermessages-proto)"
            }
        }
    },
    "weapons": {
        "title": "Weapons",
        "description": "A list of API functions for weapons.",
        "template": "category",
        "icon": "gun",
        "data": {
            "weaponsmanager": {
                "title": "Weapons Manager",
                "description": "A list of API functions for weapons manager.",
                "template": "category",
                "icon": "person-rifle",
                "data": {
                    "giveweapon": {
                        "title": "GiveWeapon",
                        "template": "function-syntax",
                        "description": "Gives the specified weapon to player.",
                        "variable": {
                            "lua": "weaponmanager:GiveWeapon"
                        },
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "weapon_name": "string"
                        },
                        "additional": {}
                    },
                    "removebyclassname": {
                        "title": "RemoveByClassname",
                        "template": "function-syntax",
                        "description": "Removes the weapons with the specified classname.",
                        "variable": {
                            "lua": "weaponmanager:RemoveByClassname"
                        },
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "classname": "string"
                        },
                        "additional": {}
                    },
                    "removebyslot": {
                        "title": "RemoveBySlot",
                        "template": "function-syntax",
                        "description": "Removes the weapons with the specified slot.",
                        "variable": {
                            "lua": "weaponmanager:RemoveBySlot"
                        },
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "slot": "gear_slot_t"
                        },
                        "additional": {}
                    },
                    "removebyitemdefinition": {
                        "title": "RemoveByItemDefinition",
                        "template": "function-syntax",
                        "description": "Removes the weapons with the specified item definition index.",
                        "variable": {
                            "lua": "weaponmanager:RemoveByItemDefinition"
                        },
                        "return": {
                            "lua": "void"
                        },
                        "params": {
                            "idx": "number"
                        },
                        "additional": {}
                    },
                    "getfirstinslot": {
                        "title": "GetFIrstInSlot",
                        "template": "function-syntax",
                        "description": "Returns the first weapon in the specified slot.",
                        "variable": {
                            "lua": "weaponmanager:GetFIrstInSlot"
                        },
                        "return": {
                            "lua": "Weapon"
                        },
                        "params": {
                            "slot": "gear_slot_t"
                        },
                        "additional": {}
                    },
                    "getinslot": {
                        "title": "GetInSlot",
                        "template": "function-syntax",
                        "description": "Returns the weapons in the specified slot.",
                        "variable": {
                            "lua": "weaponmanager:GetInSlot"
                        },
                        "return": {
                            "lua": "table Weapon"
                        },
                        "params": {
                            "slot": "gear_slot_t"
                        },
                        "additional": {}
                    },
                    "removeweapons": {
                        "title": "RemoveWeapons",
                        "template": "function-syntax",
                        "description": "Removes all the weapons of the player.",
                        "variable": {
                            "lua": "weaponmanager:RemoveWeapons"
                        },
                        "return": {
                            "lua": "void"
                        },
                        "params": {},
                        "additional": {}
                    },
                    "dropweapons": {
                        "title": "DropWeapons",
                        "template": "function-syntax",
                        "description": "Drops all the weapons of the player.",
                        "variable": {
                            "lua": "weaponmanager:DropWeapons"
                        },
                        "return": {
                            "lua": "void"
                        },
                        "params": {},
                        "additional": {}
                    },
                    "getweapons": {
                        "title": "GetWeapons",
                        "template": "function-syntax",
                        "description": "Returns a table of all the player weapons.",
                        "variable": {
                            "lua": "weaponmanager:GetWeapons"
                        },
                        "return": {
                            "lua": "table Weapon"
                        },
                        "params": {},
                        "additional": {}
                    }
                }
            },
            "weapon": {
                "title": "Weapon",
                "description": "A weapon is an object which stores informations about a player's weapon.",
                "template": "class-syntax",
                "languages": [
                    "lua"
                ],
                "constructor": {
                    "playerid": "number",
                    "ptr": "string"
                },
                "properties": {},
                "functions": {
                    "CBasePlayerWeapon": {
                        "return": {
                            "lua": "CBasePlayerWeapon"
                        },
                        "params": {}
                    },
                    "CCSWeaponBase": {
                        "return": {
                            "lua": "CCSWeaponBase"
                        },
                        "params": {}
                    },
                    "CBasePlayerWeaponVData": {
                        "return": {
                            "lua": "CBasePlayerWeaponVData"
                        },
                        "params": {}
                    },
                    "CCSWeaponBaseVData": {
                        "return": {
                            "lua": "CCSWeaponBaseVData"
                        },
                        "params": {}
                    },
                    "SetDefaultAttributes": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {}
                    },
                    "Remove": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {}
                    },
                    "Drop": {
                        "return": {
                            "lua": "void"
                        },
                        "params": {}
                    }
                },
                "additional": {}
            }
        }
    }
}